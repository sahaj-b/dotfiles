#!/usr/bin/env bash

if ! command -v fd &>/dev/null; then
  echo "Error: 'fd' command not found"
fi

IGNORE_PATTERNS=(
  ".git" "node_modules" "__pycache__" "venv" ".venv" "env" ".env" "build" "dist" "target" "out" "debug.log"
)

USER_IGNORES=()
MAX_FILE_SIZE="800k"
OUTPUT_FILE=""

show_help() {
  echo "Usage: $(basename "$0") [OPTIONS]"
  echo "Generate a context dump of your project files"
  echo
  echo "Options:"
  echo "  -e, --exclude PATTERN    Exclude files/folders matching PATTERN (can be used multiple times)"
  echo "  -m, --max-size SIZE      Max file size to include (default: ${MAX_FILE_SIZE})"
  echo "  -o, --output FILE        Write output to FILE instead of stdout"
  echo "  -h, --help               Show this help message"
  exit 0
}

# parse args
while [[ "$#" -gt 0 ]]; do
  case $1 in
  -e | --exclude)

    current_flag="$1"
    shift

    if [[ -z "$1" || "$1" == -* ]]; then
      echo "Error: Option '$current_flag' requires at least one pattern argument." >&2
      exit 1
    fi

    while [[ -n "$1" && "$1" != -* ]]; do
      USER_IGNORES+=("$1")
      shift
    done

    ;;
  -m | --max-size)
    [[ -n "$2" ]] && MAX_FILE_SIZE="$2" && shift 2 || {
      echo "Error: '$1' needs a size." >&2
      exit 1
    }
    ;;
  -o | --output)
    [[ -n "$2" ]] && OUTPUT_FILE="$2" && shift 2 || {
      echo "Error: '$1' needs a filename." >&2
      exit 1
    }
    ;;
  -h | --help)
    show_help
    ;;
  *)
    echo "Unknown option: $1" >&2
    echo "Use --help to see available options" >&2
    exit 1
    ;;
  esac
done

# output redirection
if [[ -n "$OUTPUT_FILE" ]]; then
  exec >"$OUTPUT_FILE"
fi

ALL_IGNORE_PATTERNS=("${IGNORE_PATTERNS[@]}" "${USER_IGNORES[@]}")

# build tree cmd
TREE_AVAILABLE=false
TREE_IGNORE_ARGS=()
if command -v tree &>/dev/null; then
  TREE_AVAILABLE=true
  if [ ${#ALL_IGNORE_PATTERNS[@]} -gt 0 ]; then
    TREE_IGNORE_PATTERN=$(printf "%s|" "${ALL_IGNORE_PATTERNS[@]}")
    TREE_IGNORE_ARGS=("-I" "${TREE_IGNORE_PATTERN%|}") # Remove trailing |
  fi
else
  echo "WARNING: 'tree' command not found. Skipping tree view." >&2
fi

# build fd cmd args
FD_CMD_ARGS=("--print0" "--type" "f" "--size" "-$MAX_FILE_SIZE")

for pattern in "${ALL_IGNORE_PATTERNS[@]}"; do
  FD_CMD_ARGS+=("--exclude" "$pattern")
done

# execution
if [ ${#USER_IGNORES[@]} -gt 0 ]; then
  echo "Excluding files/folders: ${USER_IGNORES[*]}"
fi

if [ "$TREE_AVAILABLE" = true ]; then
  echo "--- Workspace Tree ---"
  tree -aF "${TREE_IGNORE_ARGS[@]}" .
  echo -e "\n\n--- File Contents ---"
else
  echo "--- File Contents ---"
fi

FD_EXEC_CMD=("fd")
FD_EXEC_CMD+=("${FD_CMD_ARGS[@]}")
FD_EXEC_CMD+=(".")

while IFS= read -r -d $'\0' file; do
  [[ -z "$file" ]] && continue

  clean_file="${file#./}"

  if file "$clean_file" | grep -qEi "binary|media|image"; then
    echo "--- ${clean_file} (BINARY FILE SKIPPED) ---"
    continue
  fi

  echo "--- ${clean_file} ---"
  cat "${clean_file}" 2>/dev/null || echo "[mkcontext: Error reading file '${clean_file}']" >&2
  echo
done < <("${FD_EXEC_CMD[@]}")
