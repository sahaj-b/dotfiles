#!/usr/bin/env bash

dotfiles_dir="/home/sahaj/LinuxBackup/dotfiles/"
data_dir="/media/data/Linux_Backup/dotfiles/"

dotfiles=(
  "/etc/keyd/default.conf"
  "/etc/tlp.conf"
  "/etc/auto-cpufreq.conf"
  "/etc/systemd/system/powermgmt.service"
  "/etc/systemd/system/fix-mic.service"
  # "/etc/udev/rules.d/90-power.rules"
  "$HOME/.clang-format"
  "$HOME/scripts/"
  "$HOME/.gitconfig"
  "$HOME/.zshrc"
  "$HOME/.zprofile"
  "$HOME/.config/hypr/"
  "$HOME/.config/swaylock/config"
  "$HOME/.config/waybar/"
  "$HOME/.config/dunst/"
  "$HOME/.config/wofi/"
  "$HOME/.config/mpv/"
  "$HOME/.config/nvim/"
  "$HOME/.config/yay/config.json"
  "$HOME/.config/gtk-3.0/"
  "$HOME/.config/gtk-4.0/"
  "$HOME/.config/easyeffects/"
  # "$HOME/.config/alacritty/alacritty.toml"
  "$HOME/.config/dconf/"
  "$HOME/.config/tmux/tmux.conf"
  "$HOME/.config/foot/"
  "$HOME/.config/starship/"
  "$HOME/.config/btop/"
  "$HOME/.config/mimeapps.list"
  "$HOME/wallpapers/"
  "$HOME/.config/mods/"
  "$HOME/.config/mcphub/"
)

# --- helpers ---

GREEN='\e[32m'
RED='\e[31m'
YELLOW='\e[33m'
RESET='\e[0m'
CLEAR_BOTTOM='\x1b[J'
success() {
  echo -e "${GREEN}$1$RESET"
}
error() {
  echo -e "${RED}$1$RESET"
}
warn() {
  echo -e "${YELLOW}$1$RESET"
}

spinner() {
  tput civis
  trap 'tput cnorm; exit' INT TERM EXIT
  local frames=("⣾" "⣽" "⣻" "⢿" "⡿" "⣟" "⣯" "⣷")
  local i=0
  while true; do
    printf "\r%s" ${frames[$i]}
    i=$(((i + 1) % ${#frames[@]}))
    sleep 0.1
  done
}

spinnerRun() {
  local cmd="$1"
  local msg="$2"
  local success_msg="${3:-$msg Done.}"
  local error_msg="${4:-$msg Failed.}"

  echo -n "  $msg"
  tput civis

  spinner &
  spinPid=$!
  eval "$cmd"
  status=$?
  kill $spinPid &>/dev/null
  wait $spinPid &>/dev/null

  tput cnorm
  echo -en "\r${CLEAR_BOTTOM}"
  if [ $status -eq 0 ]; then
    success "$success_msg"
  else
    error "$error_msg (Exit Code: $status)"
  fi
  return $status
}

# --- main script ---

trap 'tput cnorm;exit' INT TERM EXIT
trap 'error \\nTERMINATING; exit 1' HUP INT TERM

cd "${dotfiles_dir}" || {
  echo "Couldn't cd into ${dotfiles_dir}"
  exit 1
}

# handle previous 'copy only' runs
git add .
git diff --staged --quiet || git commit -m "Updated" &>/dev/null

echo "Checking for remote changes..."
git fetch --quiet
if git status -sb | grep -q 'behind'; then
  git pull origin main --rebase
fi

echo
spinnerRun "git rm -rf . >/dev/null" "Nuking $dotfiles_dir" "💥 Nuked $dotfiles_dir" "Git rm failed"

function push() {
  git add .
  if git diff --staged --quiet; then
    warn "Nothing to commit 😔"
    return 0
  fi
  success "📝 Commiting"
  git commit -m "Updated" || {
    error "Commit failed! 😭"
    return 1
  }
  success "☁️ Pushing dotfiles to github"
  git push -u origin main || {
    error "Git push failed!"
    return 1
  }
  success "✅ Pushed successfuly"
}

function copyDots() {
  mkdir -p "$1"
  for item in "${dotfiles[@]}"; do
    if [ -e "$item" ]; then
      relative_path="${item#~/}"
      if [[ $item == /etc/* ]]; then
        relative_path="${item#/}"
      fi
      destination_dir=$(dirname "$1$relative_path")
      mkdir -p "$destination_dir"
      if ! cp -r "$item" "$destination_dir"; then
        error "Couldn't copy $item to $destination_dir"
      fi
    else
      warn "Couldn't find $item"
    fi
  done
}

spinnerRun "copyDots \"$dotfiles_dir\"" "Copying dotfiles to $dotfiles_dir" "🚚 Copied dotfiles to $dotfiles_dir" "Failed to copy dotfiles to $dotfiles_dir"

if [[ $1 != "cp" ]]; then
  push $dotfiles_dir
fi

if [ -w "$data_dir" ]; then
  rm -rf "$data_dir" || exit
  echo -n "  Copying dotfiles to $data_dir"
  spinnerRun "copyDots \"$data_dir\"" "Copying dotfiles to $data_dir" "🚚 Copied dotfiles to $data_dir" "Copying dotfiles to $data_dir failed"
else
  warn "\nSkipping copying to $data_dir"
  exit 1
fi

cd - >/dev/null || exit
