#!/usr/bin/bash
# Shamelessly stolen from https://github.com/PROxZIMA/.dotfiles/blob/master/.scripts/caway (modified)

# Nuke all internal spawns when script dies
trap "trap - SIGTERM && kill -- -$$" SIGINT SIGTERM

# Kill any existing instances and clean up
echo "DEBUG: Killing existing processes..." >&2
pkill -f "cava.*cava_waybar_config" 2>/dev/null || true
pkill -f "playerctl.*-F" 2>/dev/null || true

BARS=8
FRAMERATE=60
EQUILIZER=1

echo "DEBUG: Starting caway with $BARS bars, $FRAMERATE fps, equilizer=$EQUILIZER" >&2

# Get script options
while getopts 'b:f:m:eh' flag; do
  case "${flag}" in
  b) BARS="${OPTARG}" ;;
  f) FRAMERATE="${OPTARG}" ;;
  e) EQUILIZER=0 ;;
  h)
    echo "caway usage: caway [ options ... ]"
    echo "where options include:"
    echo
    echo "  -b <integer>  (Number of bars to display. Default 8)"
    echo "  -f <integer>  (Framerate of the equilizer. Default 60)"
    echo "  -e            (Disable equilizer. Default enabled)"
    echo "  -h            (Show help message)"
    exit 0
    ;;
  esac
done

bar="▁▂▃▄▅▆▇█"
dict="s/;//g;"

# creating "dictionary" to replace char with bar + thin space " "
i=0
while [ $i -lt ${#bar} ]; do
  dict="${dict}s/$i/${bar:$i:1} /g;"
  i=$((i = i + 1))
done

# Remove last extra thin space
dict="${dict}s/.$//;"

clean_create_pipe() {
  if [ -p $1 ]; then
    unlink $1
  fi
  mkfifo $1
  # Clear any potential garbage in the pipe
  timeout 0.1 cat $1 >/dev/null 2>&1 || true
}

kill_pid_file() {
  if [[ -f $1 ]]; then
    while read pid; do
      { kill "$pid" && wait "$pid"; } 2>/dev/null
    done <$1
  fi
}

# PID of the cava process and while loop launched from the script
cava_waybar_pid="/tmp/cava_waybar_pid"

# Clean pipe for cava
echo "DEBUG: Creating cava pipe at $cava_waybar_pipe" >&2
cava_waybar_pipe="/tmp/cava_waybar.fifo"
clean_create_pipe $cava_waybar_pipe

# Custom cava config
cava_waybar_config="/tmp/cava_waybar_config"
echo "
[general]
mode = normal
framerate = $FRAMERATE
bars = $BARS

[output]
method = raw
raw_target = $cava_waybar_pipe
data_format = ascii
ascii_max_range = 7
channels = mono
" >$cava_waybar_config

# Clean pipe for playerctl
echo "DEBUG: Creating playerctl pipe at $playerctl_waybar_pipe" >&2
playerctl_waybar_pipe="/tmp/playerctl_waybar.fifo"
clean_create_pipe $playerctl_waybar_pipe

# playerctl output into playerctl_waybar_pipe
# playerctl -a metadata --format '{"text": "{{artist}} - {{title}}", "tooltip": "{{playerName}} : {{markup_escape(artist)}} - {{markup_escape(title)}}", "alt": "{{status}}", "class": "{{status}}"}' -F >$playerctl_waybar_pipe &
echo "DEBUG: Starting playerctl" >&2
playerctl -p 'spotify,firefox,brave' metadata --format '{"text": "{{markup_escape(title)}}", "tooltip": "{{playerName}} : {{markup_escape(title)}} - {{markup_escape(artist)}}", "alt": "{{status}}", "class": "{{status}}", "url": "{{xesam:url}}"}' -F >$playerctl_waybar_pipe &

# Read the playerctl o/p via its fifo pipe
echo "DEBUG: Starting main loop, reading from playerctl pipe..." >&2
while read -r line; do
  echo "DEBUG: Raw line: $line" >&2

  # Skip empty lines or invalid JSON
  if [[ -z "$line" || "$line" == *"null"* ]]; then
    echo "DEBUG: Skipping empty/null line" >&2
    continue
  fi

  # Check if URL contains spotify or music.youtube
  url=$(echo "$line" | jq -r '.url // ""')
  if [[ ! "$url" =~ (spotify|music\.youtube) ]]; then
    echo "DEBUG: Skipping non-spotify/youtube music URL: $url" >&2
    continue
  fi

  echo "DEBUG: Valid JSON received, processing..." >&2

  # Kill the cava process to stop the input to cava_waybar_pipe
  kill_pid_file $cava_waybar_pid

  # Decode HTML entities from text and tooltip fields using python
  decoded_text=$(echo "$line" | jq -r '.text' | python -c "import sys, html; print(html.unescape(sys.stdin.read()))")
  decoded_tooltip=$(echo "$line" | jq -r '.tooltip' | python -c "import sys, html; print(html.unescape(sys.stdin.read()))")

  # Reconstruct the JSON with the decoded values
  clean_line=$(echo "$line" | jq --arg text "$decoded_text" --arg tooltip "$decoded_tooltip" '.text = $text | .tooltip = $tooltip')
  echo "DEBUG: Cleaned line: $clean_line" >&2

  echo "$clean_line" | jq --unbuffered --compact-output

  # If the class says "Playing" and equilizer is enabled
  # then show the cava equilizer
  player_status=$(echo "$line" | jq -r '.class')
  echo "DEBUG: Player status: $player_status, equilizer: $EQUILIZER" >&2

  if [[ $EQUILIZER == 1 && "$player_status" == 'Playing' ]]; then
    echo "DEBUG: Starting equilizer mode..." >&2
    # Show the playing title for 2 seconds
    sleep 2

    # Clear any leftover data in cava pipe
    timeout 0.1 cat $cava_waybar_pipe >/dev/null 2>&1 || true

    echo "DEBUG: Starting cava process..." >&2
    # cava output into cava_waybar_pipe
    cava -p $cava_waybar_config >$cava_waybar_pipe &

    # Save the PID of child process
    echo $! >$cava_waybar_pid

    # Read the cava o/p via its fifo pipe
    while read -r cmd2; do
      # Skip empty cava output
      if [[ -z "$cmd2" ]]; then
        echo "DEBUG: Skipping empty cava output" >&2
        continue
      fi

      # Change the "text" key to bars
      echo "$clean_line" | jq --arg a "$(echo $cmd2 | sed "$dict")" '.text = $a' --unbuffered --compact-output
    done <$cava_waybar_pipe & # Do this fifo read in background

    # Save the while loop PID into the file as well
    echo $! >>$cava_waybar_pid
  fi
done <$playerctl_waybar_pipe
