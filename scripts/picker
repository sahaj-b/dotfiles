#!/usr/bin/env bash

# Usage: ./picker.sh [--float] [emoji|nerdfont|unicode|ansi_styles|ansi_controls|ansi_keycodes]
# Picker script for selecting and copying special characters
# Supports emoji, nerdfont, unicode, ansi styles/controls/keycodes
# Can be opened normally or floating mode
# Floating mode exits automatically after copying, normal mode can be exited with Ctrl-C

# --- Configuration ---
TERMINAL="foot"
EMOJI_FILE="$HOME/emojis.txt"
NERDFONT_FILE="$HOME/nerdfonts.txt"
UNICODE_FILE="$HOME/unicode.txt"
ANSI_STYLES_FILE="$HOME/scripts/ansiData/ansi_styles.txt"
ANSI_KEYCODES_FILE="$HOME/scripts/ansiData/ansi_keycodes.txt"
ANSI_CONTROLS_FILE="$HOME/scripts/ansiData/ansi_controls.txt"

# --- Helper functions ---
check_requirements() {
  for cmd in fzf wl-copy awk grep printf notify-send; do
    if ! command -v "$cmd" &>/dev/null; then
      echo "Error: Required command '$cmd' not found" >&2
      command -v notify-send &>/dev/null && notify-send "Picker Error" "Required command '$cmd' not found"
      exit 1
    fi
  done
}

error_exit() {
  echo "Error: $1" >&2
  exit 1
}

check_file() {
  [[ -f "$1" ]] || error_exit "File not found: $1"
}

window_config() {
  case "$1" in
  wide) echo "[float; size 60% 70%; center]" ;;
  tall) echo "[float; size 40% 80%; center]" ;;
  *) echo "[float; size 30% 25%; center]" ;;
  esac
}

# --- Parse arguments ---
check_requirements

FLOAT_MODE=0
PICKER_TYPE=""
FLOAT_ARG="--float"

if [[ "$1" == "$FLOAT_ARG" ]]; then
  FLOAT_MODE=1
  PICKER_TYPE="$2"
elif [[ "$2" == "$FLOAT_ARG" ]]; then
  FLOAT_MODE=1
  PICKER_TYPE="$1"
else
  PICKER_TYPE="$1"
fi

# --- Picker for pickers ---
if [[ -z "$PICKER_TYPE" ]]; then
  fzf_base_opts="--layout=reverse --prompt='Select Picker: ' --bind='ctrl-c:abort'"

  if [[ "$FLOAT_MODE" -eq 1 ]]; then
    window_config=$(window_config "small")
    quoted_script_path=$(printf '%q' "$0")
    fzf_cmd_float="printf 'emoji\\nnerdfont\\nunicode\\nansi_styles\\nansi_controls\\nansi_keycodes\\n' | \\
    fzf --layout=reverse --prompt='Select Picker: ' --bind='ctrl-c:abort' \\
        --bind='enter:execute($quoted_script_path {} \"$FLOAT_ARG\")+accept'"
    hyprctl dispatch exec "$window_config $TERMINAL -e sh -c \"$fzf_cmd_float\""

  else
    picker_options=("emoji" "nerdfont" "unicode" "ansi_styles" "ansi_controls" "ansi_keycodes")
    selected_picker=$(printf "%s\n" "${picker_options[@]}" | eval fzf "$fzf_base_opts")
    [[ -z "$selected_picker" ]] && exit 0
    exec "$0" "$selected_picker"
  fi
  exit 0
fi

# --- Run Specific Picker ---

FZF_OPTS_BASE="--layout=reverse --bind='ctrl-d:half-page-down,ctrl-u:half-page-up,ctrl-c:abort'"

WINDOW_TYPE="wide"
[[ "$PICKER_TYPE" == "ansi_styles" ]] && WINDOW_TYPE="tall"

# --- Command definitions ---
data_cmd=""
fzf_extra_opts=""
extractor_cmd="awk '{print \$1}'" # space delimiter (except for ansi_styles)

case "$PICKER_TYPE" in
emoji)
  check_file "$EMOJI_FILE"
  data_cmd="cat '$EMOJI_FILE'"
  fzf_extra_opts="--prompt='Emoji: '"
  ;;
nerdfont)
  check_file "$NERDFONT_FILE"
  data_cmd="cat '$NERDFONT_FILE'"
  fzf_extra_opts="--prompt='NerdFont: '"
  ;;
unicode)
  check_file "$UNICODE_FILE"
  data_cmd="cat '$UNICODE_FILE'"
  fzf_extra_opts="--prompt='Unicode: '"
  ;;
ansi_controls)
  check_file "$ANSI_CONTROLS_FILE"
  data_cmd="grep -v '^#' '$ANSI_CONTROLS_FILE'"
  fzf_extra_opts="--prompt='ANSI Controls: '"
  ;;
ansi_keycodes)
  check_file "$ANSI_KEYCODES_FILE"
  data_cmd="grep -v '^#' '$ANSI_KEYCODES_FILE'"
  fzf_extra_opts="--prompt='ANSI Keycodes: '"
  ;;
ansi_styles)
  check_file "$ANSI_STYLES_FILE"
  # pre-process lines for fzf with tab delimiter
  data_cmd="grep -v '^#' '$ANSI_STYLES_FILE' | \
    while IFS= read -r line || [[ -n \"\$line\" ]]; do \
    [[ -z \"\$line\" ]] && continue; \
    code=\${line%% *}; \
    desc=\${line#* }; \
    printf '%s\t%b %s\\033[0m\n' \"\$code\" \"\$code\" \"\$desc\"; \
    done"
  fzf_extra_opts="--ansi --color=hl:-1,hl+:-1 --delimiter='\t' --with-nth=2 --nth=1 --prompt='ANSI Styles: '"
  extractor_cmd="awk -F'\t' '{print \$1}'" # tab delimiter
  ;;
*)
  error_exit "Invalid picker type: '$PICKER_TYPE'."
  ;;
esac

# --- Execute Picker ---

if [[ "$FLOAT_MODE" -eq 1 ]]; then
  # floating mode

  window_config=$(window_config "$WINDOW_TYPE")
  inner_cmd=$(
    cat <<INNER_EOF
    export FZF_DEFAULT_OPTS="$FZF_OPTS_BASE $fzf_extra_opts" # cool env var trick to set fzf options
    selection=\$($data_cmd | fzf) || exit 0
    if [[ -n "\$selection" ]]; then
        code=\$($extractor_cmd <<< "\$selection")
        printf "%s" "\$code" | wl-copy
    fi
INNER_EOF
  )
  hyprctl dispatch exec "$window_config $TERMINAL -e sh -c $(printf '%q' "$inner_cmd")"

else
  # normal mode

  copy_notify_cmd=$(
    cat <<INNER_EOF
    code=\$($extractor_cmd <<< {})
    printf "%s" "\$code" | wl-copy
    notify-send -t 1000 "Picker Copied" "\$code"
INNER_EOF
  )

  export FZF_DEFAULT_OPTS="$FZF_OPTS_BASE $fzf_extra_opts"

  eval "$data_cmd" | fzf --bind="enter:execute-silent($copy_notify_cmd)"

fi

exit 0
